const { Requests, Services, Clients, Feedback, Discounts, Statuses } = require('../modules/modules');
const { Sequelize } = require('sequelize'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Sequelize –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—è–º–∏ —á–µ—Ä–µ–∑ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã
const logAction = require('../utils/logger'); // –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏–π
const ApiError = require('../error/ApiError'); // –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∞—Å—Å –æ—à–∏–±–æ–∫ API

class RequestsController {
  // 1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
  async createRequest(req, res, next) {
    logAction('üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏'); // –õ–æ–≥ –Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∞

    const { client_id, service_id, start_time, end_time, price, discount_id } = req.body;
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞

    try {
      const newRequest = await Requests.create({
        client_id,
        status_id: 4, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        service_id,
        start_time,
        end_time,
        price,
        price_without_discount: price, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        discount_id,
        created_at: new Date(), // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        confirmation: false // –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      });

      logAction(`‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${JSON.stringify(newRequest)}`); // –õ–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      res.status(201).json(newRequest); // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
    } catch (error) {
      logAction(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: ${error.message}`, 'üö®'); // –õ–æ–≥ –æ—à–∏–±–∫–∏
      next(ApiError.internal('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏')); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —á–µ—Ä–µ–∑ ApiError
    }
  }

  // 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å "–∑–∞–≤–µ—Ä—à–µ–Ω–∞"
  async updateToComplete(req, res, next) {
    logAction('üîÅ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏');

    const { request_id } = req.params;

    try {
      const request = await Requests.findByPk(request_id); // –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏
      if (!request) {
        logAction(`‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —Å ID ${request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return next(ApiError.notFound('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'));
      }

      await request.update({ status_id: 1, end_time: new Date() }); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
      logAction(`‚úÖ –ó–∞—è–≤–∫–∞ ${request_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
      res.json({ message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞' });
    } catch (error) {
      logAction(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: ${error.message}`, 'üö®');
      next(ApiError.internal('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏'));
    }
  }

  // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ "–æ—Ç–º–µ–Ω–µ–Ω–∞"
  async updateToCanceled(req, res, next) {
    logAction('‚ùå –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –∑–∞—è–≤–∫–∏');

    const { request_id } = req.params;

    try {
      const request = await Requests.findByPk(request_id);
      if (!request) {
        logAction(`‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —Å ID ${request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return next(ApiError.notFound('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'));
      }

      await request.update({ status_id: 2, canceled_at: new Date() });
      logAction(`üîï –ó–∞—è–≤–∫–∞ ${request_id} –æ—Ç–º–µ–Ω–µ–Ω–∞`);
      res.json({ message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞' });
    } catch (error) {
      logAction(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏: ${error.message}`, 'üö®');
      next(ApiError.internal('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏'));
    }
  }

  // 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
  async updateToConfirm(req, res, next) {
    logAction('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏');

    const { request_id } = req.params;

    try {
      const request = await Requests.findByPk(request_id);
      if (!request) {
        logAction(`‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —Å ID ${request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return next(ApiError.notFound('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'));
      }

      await request.update({ confirmation: true, status_id: 3 });
      logAction(`‚úÖ –ó–∞—è–≤–∫–∞ ${request_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞`);
      res.json({ message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' });
    } catch (error) {
      logAction(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: ${error.message}`, 'üö®');
      next(ApiError.internal('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏'));
    }
  }

  // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ –º–∞—Å—Ç–µ—Ä—É
  async getRequestsByMaster(req, res, next) {
    logAction('üîé –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ –º–∞—Å—Ç–µ—Ä—É');

    const { master_id } = req.params;

    try {
      const requests = await Requests.findAll({
        attributes: [
          'request_id',
          'start_time',
          'end_time',
          'price',
          'confirmation',
          [Sequelize.col('Service.name'), 'service_name'],
          [Sequelize.col('Service.price'), 'service_price'],
          [Sequelize.col('Service.duration'), 'service_duration'],
          [Sequelize.col('Client.user_id'), 'client_user_id'],
          [Sequelize.col('Feedback.rating'), 'rating'],
          [Sequelize.col('Feedback.text'), 'feedback_text'],
          [Sequelize.col('Discount.name'), 'discount_name'],
          [Sequelize.col('Discount.percentage'), 'discount_percentage'],
          [Sequelize.col('Status.name'), 'status_name'],
          [Sequelize.col('Status.description'), 'status_description']
        ],
        include: [
          {
            model: Services,
            as: 'Service',
            where: { master_id },
            required: true
          },
          {
            model: Clients,
            as: 'Client',
            attributes: ['user_id'],
            required: false
          },
          {
            model: Feedback,
            as: 'Feedback',
            attributes: ['rating', 'text'],
            required: false
          },
          {
            model: Discounts,
            as: 'Discount',
            attributes: ['name', 'percentage'],
            required: false
          },
          {
            model: Statuses,
            as: 'Status',
            attributes: ['name', 'description'],
            required: false
          }
        ]
      });

      if (!requests || requests.length === 0) {
        logAction(`‚ö†Ô∏è –ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ —Å ID ${master_id}`);
        return next(ApiError.notFound('–ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.'));
      }

      logAction(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${requests.length} –∑–∞—è–≤–æ–∫ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ ${master_id}`);
      res.json(requests);
    } catch (error) {
      logAction(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –ø–æ –º–∞—Å—Ç–µ—Ä—É: ${error.message}`, 'üö®');
      next(ApiError.internal('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –ø–æ –º–∞—Å—Ç–µ—Ä—É'));
    }
  }

  // 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ –∫–ª–∏–µ–Ω—Ç—É
  async getRequestsByClient(req, res, next) {
    logAction('üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ –∫–ª–∏–µ–Ω—Ç—É');

    const { client_id } = req.params;

    if (!client_id) {
      logAction('‚ö†Ô∏è client_id –Ω–µ —É–∫–∞–∑–∞–Ω');
      return next(ApiError.badRequest('client_id is required'));
    }

    try {
      const requests = await Requests.findAll({
        where: { client_id },
        include: [
          {
            model: Services,
            attributes: ['name', 'price', 'duration']
          },
          { model: Feedback, attributes: ['rating', 'text'] },
          { model: Discounts, attributes: ['name', 'percentage'] },
          { model: Statuses, attributes: ['name', 'description'] }
        ]
      });

      logAction(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${requests.length} –∑–∞—è–≤–æ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${client_id}`);
      res.json(requests);
    } catch (error) {
      logAction(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –ø–æ –∫–ª–∏–µ–Ω—Ç—É: ${error.message}`, 'üö®');
      next(ApiError.internal('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –ø–æ –∫–ª–∏–µ–Ω—Ç—É'));
    }
  }
}

module.exports = new RequestsController();
