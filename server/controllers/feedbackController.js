// –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–æ—Ç–∑—ã–≤–æ–≤)
const { Feedback, Requests } = require('../modules/modules');

// –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
const ApiError = require('../error/ApiError');

// –ò–º–ø–æ—Ä—Ç –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏–π
const logAction = require('../utils/logger');

class FeedbackController {
    // –ú–µ—Ç–æ–¥: —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –∏ –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –∑–∞—è–≤–∫–µ
    async create(req, res, next) {
        logAction('–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞', 'üìù');

        const { rating, text, request_id } = req.body; // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞

        try {
            // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const feedback = await Feedback.create({ rating, text });
            logAction(`–°–æ–∑–¥–∞–Ω –æ—Ç–∑—ã–≤: ${JSON.stringify(feedback)}`, '‚úÖ');

            // –ü—Ä–∏–≤—è–∑–∫–∞ –æ—Ç–∑—ã–≤–∞ –∫ –∑–∞—è–≤–∫–µ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è feedback_id)
            const updated = await Requests.update(
                { feedback_id: feedback.feedback_id },
                { where: { request_id } }
            );

            if (updated[0] === 0) {
                logAction(`–ó–∞—è–≤–∫–∞ —Å ID ${request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`, '‚ö†Ô∏è');
                return next(ApiError.notFound('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –æ—Ç–∑—ã–≤–∞'));
            }

            return res.json({
                message: '–û—Ç–∑—ã–≤ —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞—è–≤–∫–µ',
                feedback
            });
        } catch (error) {
            logAction(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: ${error.message}`, '‚ùå');
            return next(ApiError.internal('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞'));
        }
    }

    // –ú–µ—Ç–æ–¥: –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã
    async getAll(req, res, next) {
        logAction('–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤', 'üì•');

        try {
            const feedbacks = await Feedback.findAll(); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã
            logAction(`–ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: ${feedbacks.length}`, 'üîç');

            return res.json(feedbacks);
        } catch (error) {
            logAction(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤: ${error.message}`, '‚ùå');
            return next(ApiError.internal('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤'));
        }
    }

    // –ú–µ—Ç–æ–¥: –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤ –ø–æ ID
    async getById(req, res, next) {
        const { feedback_id } = req.params;
        logAction(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ —Å ID ${feedback_id}`, 'üì•');

        try {
            const feedback = await Feedback.findOne({ where: { feedback_id } });

            if (!feedback) {
                logAction(`–û—Ç–∑—ã–≤ —Å ID ${feedback_id} –Ω–µ –Ω–∞–π–¥–µ–Ω`, '‚ö†Ô∏è');
                return next(ApiError.notFound('–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω'));
            }

            logAction(`–û—Ç–∑—ã–≤ –Ω–∞–π–¥–µ–Ω: ${JSON.stringify(feedback)}`, '‚úÖ');
            return res.json(feedback);
        } catch (error) {
            logAction(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞ —Å ID ${feedback_id}: ${error.message}`, '‚ùå');
            return next(ApiError.internal('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞'));
        }
    }
}

module.exports = new FeedbackController();
