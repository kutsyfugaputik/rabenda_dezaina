const bcrypt = require('bcrypt'); // –î–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
const jwt = require('jsonwebtoken'); // –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è JWT
const moment = require('moment'); // –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
const { Users, Clients } = require('../modules/modules'); // –ú–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
const ApiError = require('../error/ApiError'); // –ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
const logAction = require('../utils/logger'); // –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

class UserController {
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async register(req, res, next) {
    logAction('üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    const { first_name, last_name, father_name, email, phone, birthday, password } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!password) return next(ApiError.badRequest('–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'));
    if (!email || !first_name || !last_name) {
      return next(ApiError.badRequest('–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: email, –∏–º—è, —Ñ–∞–º–∏–ª–∏—è'));
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    let formattedBirthday = null;
    if (birthday) {
      const date = moment(birthday, 'DD.MM.YYYY', true);
      if (!date.isValid()) return next(ApiError.badRequest('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DD.MM.YYYY'));
      formattedBirthday = date.format('YYYY-MM-DD');
    }

    try {
      // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
      const saltRounds = 10;
      const hashedPassword = await bcrypt.hash(password, saltRounds);

      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newUser = await Users.create({
        first_name,
        last_name,
        father_name,
        email,
        phone,
        birthday: formattedBirthday,
        password: hashedPassword,
      });

      // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
      const client = await Clients.create({ user_id: newUser.user_id });

      logAction(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (${newUser.user_id}) –∏ –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã`);
      return res.status(201).json({ user: newUser, client });
    } catch (error) {
      logAction(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`, 'üö®');
      if (error.name === 'SequelizeUniqueConstraintError') {
        return next(ApiError.badRequest('Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è'));
      }
      return next(ApiError.internal('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'));
    }
  }

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
  async loginClient(req, res, next) {
    const { email, password } = req.body;
    logAction(`üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ${email}`);

    try {
      const user = await Users.findOne({ where: { email } });
      if (!user) return next(ApiError.unauthorized('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'));

      const isPasswordValid = await bcrypt.compare(password, user.password);
      if (!isPasswordValid) return next(ApiError.unauthorized('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'));

      const client = await Clients.findOne({ where: { user_id: user.user_id } });
      if (!client) return next(ApiError.forbidden('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'));

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT
      const token = jwt.sign({ id: user.user_id, role: 'client' }, process.env.JWT_SECRET, { expiresIn: '1h' });

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ cookie
      res.cookie('token', token, {
        httpOnly: true,
        secure: true,
        sameSite: 'Strict',
        maxAge: 3600000,
      });

      logAction(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${user.user_id} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª`);
      return res.json({ message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞',
        client_id: client});
    } catch (error) {
      logAction(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'üö®');
      return next(ApiError.internal('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'));
    }
  }

  // –í—ã—Ö–æ–¥
  logout(req, res) {
    res.clearCookie('token');
    logAction('üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    res.json({ message: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏' });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async getAll(req, res, next) {
    logAction('üìÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    try {
      const users = await Users.findAll();
      logAction(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      return res.json(users);
    } catch (error) {
      logAction(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`, 'üö®');
      return next(ApiError.internal('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'));
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)
  async logAdmin(req, res) {
    logAction('üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    return res.json({ message: 'true' });
  }
}

module.exports = new UserController();
