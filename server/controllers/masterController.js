const { Masters, Users } = require('../modules/modules');
const ApiError = require('../error/ApiError');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

const fs = require('fs');
const path = require('path');
const db = require('../modules/db'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω —Ä–∞–Ω–µ–µ.

class MasterController {
    async loginMaster(req, res) {
        const { email, password } = req.body;
        console.log('üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –º–∞—Å—Ç–µ—Ä–∞:', email);
    
        try {
            console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email...');
            const user = await Users.findOne({ where: { email } });
    
            if (!user) {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ Users');
                return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
            }
    
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: ${user.user_id}, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...`);
            const isPasswordValid = await bcrypt.compare(password, user.password);
    
            if (!isPasswordValid) {
                console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email: ${email}`);
                return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
            }
    
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–∞—Å—Ç–µ—Ä–æ–º...');
            const master = await Masters.findOne({ where: { user_id: user.user_id } });
    
            if (!master) {
                console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id ${user.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ Masters`);
                return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
            }
    
            console.log('üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞...');
            const token = jwt.sign(
                { id: user.user_id, role: 'master' },
                process.env.JWT_SECRET,
                { expiresIn: '1h' }
            );
    
            console.log('üç™ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É–∫–∏ —Å —Ç–æ–∫–µ–Ω–æ–º...');
            res.cookie('token', token, {
                httpOnly: true,
                secure: true,
                sameSite: 'Strict',
                maxAge: 3600000,
            });
    
            console.log(`‚úÖ –ú–∞—Å—Ç–µ—Ä ${user.user_id} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª`);
            return res.json({ message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –º–∞—Å—Ç–µ—Ä–∞' });
    
        } catch (error) {
            console.error('üî• –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–∞:', error);
            return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    }
    

    async getAll(req, res, next) {
        console.log('–ó–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤...');

        try {
            const masters = await Masters.findAll();
            console.log('–ù–∞–π–¥–µ–Ω–æ –º–∞—Å—Ç–µ—Ä–æ–≤:', masters.length);
            return res.json(masters);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤:', error);
            return next(ApiError.internal('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤'));
        }
    }

    async getExampleWorks(req, res) {
        try {
            const master_id = req.params.master_id;
    
            if (!master_id) {
                return res.status(400).json({ error: 'master_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω' });
            }
    
            const result = await db.query(
                'SELECT work_examples FROM masters WHERE master_id = $1',
                {
                    bind: [master_id],
                    type: db.QueryTypes.SELECT
                }
            );
    
            if (!result || result.length === 0) {
                return res.status(404).json({ error: '–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }
    
            const masterFolderPath = result[0].work_examples; // –ù–∞–ø—Ä–∏–º–µ—Ä: public/master_1
            const fullPath = path.resolve(__dirname, '..', masterFolderPath); // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
    
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞
            if (!fs.existsSync(fullPath)) {
                return res.status(404).json({ error: '–ü–∞–ø–∫–∞ —Å —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            }
    
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
            const files = fs.readdirSync(fullPath);
            if (files.length === 0) {
                return res.status(404).json({ error: '–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
            }
    
            // –°—Ç—Ä–æ–∏–º URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            const imageUrls = files.map(file => {
                return `${req.protocol}://${req.get('host')}/${masterFolderPath}/${file}`;
            });
    
            res.json({ imageUrls });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç –º–∞—Å—Ç–µ—Ä–∞:', error);
            res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    }
    
}

module.exports = new MasterController();
