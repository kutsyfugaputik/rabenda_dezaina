# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
import os
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ aiogram
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥—É–ª–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from app import keyboards as kb
from app.keyboards import create_specialists_keyboard, create_call_keyboard, create_questions_keyboard
from app.information import intro_text, about_company
from app.core.data_loader import load_data
from app.question import text_quest, questions, answers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
router = Router()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –º–∞—Å—Ç–µ—Ä–∞—Ö
users, masters = load_data()
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è Telegram ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
master_tg = 0
master_name=0

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
@router.message(CommandStart())
async def cmd_start(message: Message):
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–æ–º–∞–Ω–¥—ã /start
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.full_name}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
       message.from_user.full_name + " " + intro_text, 
        reply_markup=kb.main
    )
    logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ '–ñ–∞–ª–æ–±–∞' ---
@router.message(F.text == '–ñ–∞–ª–æ–±–∞')
async def handle_complaint(message: Message):
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã '–ñ–∞–ª–æ–±–∞'
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –≤—ã–±—Ä–∞–ª '–ñ–∞–ª–æ–±–∞'")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer("üò• *–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É –º–µ–Ω–µ–¥–∂–µ—Ä—É?*\n\n"+
    "üîπ –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"+
    "   - \"–Ø –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É, –Ω–æ –º–∞—Å—Ç–µ—Ä –æ–ø–æ–∑–¥–∞–ª –Ω–∞ 30 –º–∏–Ω—É—Ç.\"\n"+
    "   - \"–£—Å–ª—É–≥–∞ –º–∞–Ω–∏–∫—é—Ä–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ.\"\n\n"+
    "üîπ –í –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å—Ç–µ —Å–∏–º–≤–æ–ª `@`, —á—Ç–æ–±—ã –∂–∞–ª–æ–±–∞ –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"+
    "   - \"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±—ã–ª –≥—Ä—É–±, –ø—Ä–æ—à—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è.@\"\n\n"+
    "‚ùó –ú—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–Ω–æ—Å–∏–º—Å—è –∫ –∫–∞–∂–¥–æ–π –∂–∞–ª–æ–±–µ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É!",
        reply_markup=kb.any_func,
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ '–ù–∞–∑–∞–¥' ---
@router.message(F.text == '–ù–∞–∑–∞–¥')
async def handle_back(message: Message):
    # –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é;) –í–∞–º —á–µ–º-–Ω–∏–±—É–¥—å –µ—â–µ –ø–æ–º–æ—á—å??",
        reply_markup=kb.main,
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ —Å '@' ---
@router.message(F.text.contains('@'))
async def handle_complaint_received(message: Message):
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∂–∞–ª–æ–±–∞ –æ—Ç {message.from_user.full_name}: {message.text}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∂–∞–ª–æ–±—ã
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!üòâ", 
        reply_markup=kb.any_func
    )
    # –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await get_info_user(message, admin=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ '–ú–∞—Å—Ç–µ—Ä–∞' ---
@router.message(F.text == '–ú–∞—Å—Ç–µ—Ä–∞')
async def handle_specialists(message: Message):
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã '–ú–∞—Å—Ç–µ—Ä–∞'
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –≤—ã–±—Ä–∞–ª '–ú–∞—Å—Ç–µ—Ä–∞'")
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–∞—Å—Ç–µ—Ä–∞–º–∏
    specialists_keyboard = create_specialists_keyboard(
        [u.full_name() for u in users.values() if any(m.user_id == u.user_id for m in masters)]
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –º–∞—Å—Ç–µ—Ä–∞
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:", 
        reply_markup=specialists_keyboard
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞ ---
@router.message(lambda message: message.text in [u.full_name() for u in users.values()])
async def handle_selected_specialist(message: Message):
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –≤—ã–±—Ä–∞–ª —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: {message.text}")
    # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–∞—Å—Ç–µ—Ä–µ
    selected_user = next((u for u in users.values() if u.full_name() == message.text), None)
    if selected_user:
        selected_master = next((m for m in masters if m.user_id == selected_user.user_id), None)
        if selected_master:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            global master_tg
            global master_name
            master_tg = selected_master.tg_uid
            master_name= f"{selected_user.full_name()}"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ
            await message.answer(
                f"üë®‚Äçüîß {selected_user.full_name()}\n"
                f"üîπ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {selected_master.specialization}\n"
                f"üîπ –û–ø—ã—Ç: {selected_master.years_of_experience} –ª–µ—Ç",
                reply_markup=create_call_keyboard()
            )
            

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–í–æ–ø—Ä–æ—Å—ã' ---
@router.message(F.text == '–í–æ–ø—Ä–æ—Å—ã')
async def cmd_quests(message: Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∏
    await message.answer(
        text_quest,
        reply_markup=await create_questions_keyboard()
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–û –∫–æ–º–ø–∞–Ω–∏–∏' ---
@router.message(F.text == '–ö–æ–º–ø–∞–Ω–∏—è')
async def handle_about_company(message: Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ –∫–æ–º–ø–∞–Ω–∏–∏
    await message.answer(
        about_company,
        reply_markup=kb.any_func
    )
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–°–≤—è–∑–∞—Ç—å—Å—è' ---
@router.message(F.text == '–°–≤—è–∑–∞—Ç—å—Å—è')
async def handle_helping_write_to_master(message: Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ –∫–æ–º–ø–∞–Ω–∏–∏
    await message.answer(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ "+ master_name +
        "üìù *–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å –º–∞—Å—Ç–µ—Ä—É?*\n\n"
    "üîπ –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
    "   - \"–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –º–∞–Ω–∏–∫—é—Ä —Å –¥–∏–∑–∞–π–Ω–æ–º, –≤–æ–∑–º–æ–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å?\"\n\n"
    "üîπ –í –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å—Ç–µ —Å–∏–º–≤–æ–ª `*`, —á—Ç–æ–±—ã –º–∞—Å—Ç–µ—Ä –∑–Ω–∞–ª, —á—Ç–æ —ç—Ç–æ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
    "   - \"–ú–æ–∂–Ω–æ –ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å?*\"\n\n"
    "‚ùó –≠—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å –º–∞—Å—Ç–µ—Ä—É –∏ –æ–Ω —Å–º–æ–≥ –±—ã—Å—Ç—Ä–µ–µ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è!",
    reply_markup=kb.any_func
        
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –≤–æ–ø—Ä–æ—Å ---
@router.callback_query(lambda call: call.data.startswith("question_"))
async def handle_question_callback(call: CallbackQuery):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞
    question_idx = int(call.data.split("_")[1]) - 1
    question_text = questions[question_idx]
    answer_text = answers[question_idx]
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
    await call.message.answer(f"**–í–æ–ø—Ä–æ—Å:** {question_text}\n**–û—Ç–≤–µ—Ç:** {answer_text}", parse_mode="Markdown")
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:", reply_markup=await create_questions_keyboard())
    await call.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ —Å '*' ---
@router.message(F.text.endswith('*'))
async def handle_message_with_star(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∏–º–≤–æ–ª–æ–º '*' –≤ –∫–æ–Ω—Ü–µ –æ—Ç {message.from_user.full_name}: {message.text}")
    
    if master_tg == 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–±—Ä–∞–Ω –º–∞—Å—Ç–µ—Ä
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=kb.main)
        return

    await message.bot.send_message(
        master_tg,
        f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n"
        f"{message.text}\n"
        f"–û—Ç: {message.from_user.first_name} {message.from_user.last_name}\n"
        f"Username: @{message.from_user.username}"
    )
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É! üòä",
        reply_markup=kb.any_func,
    )
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ' ---
@router.message(F.text )
async def handle_other_text(message: Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("""–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω —è –µ—â–µ –Ω–µ –Ω–∞—É—á–∏–ª–∞—Å—å —Ç–∞–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º. :( 
 –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é-–ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –Ω–∞ –≤–∞—à–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ!üòäüå∏""",
        reply_markup=kb.main,
    )
# --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –º–∞—Å—Ç–µ—Ä—É ---
async def get_info_user(message: Message, admin: bool):
    bot = message.bot
    if admin:
        admin_id = os.getenv('ADMIN_ID')
        if not admin_id:
            logging.error("–ù–µ –∑–∞–¥–∞–Ω ADMIN_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
            return
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç {message.from_user.full_name}")
        await bot.send_message(
            admin_id,
            f"–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∞–º –ø–æ—Å–ª–∞–ª –∂–∞–ª–æ–±—É!üòÆ\n"
            f"{message.text}\n"
            f"–û—Ç: {message.from_user.first_name} {message.from_user.last_name}\n"
            f"Username: @{message.from_user.username}",
        )
    else:
        if master_tg == 0:
            logging.error("–ú–∞—Å—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä—É –æ—Ç {message.from_user.full_name}")
        await bot.send_message(
            master_tg,
            f"–í–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞!üòÆ\n"
            f"{message.text}\n"
            f"–û—Ç: {message.from_user.first_name} {message.from_user.last_name}\n"
            f"Username: @{message.from_user.username}",
        )
