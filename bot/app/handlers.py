import logging
import os
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from app import keyboards as kb
from app.keyboards import create_specialists_keyboard, create_call_keyboard, create_questions_keyboard
from app.intro import intro_text
from app.core.data_loader import load_data
from app.question import text_quest, questions,answers


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
router = Router()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
users, masters = load_data()
master_tg = 0  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
@router.message(CommandStart())
async def cmd_start(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.full_name}")
    await message.answer(
        intro_text, 
        reply_markup=kb.main
    )
    logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ '–ñ–∞–ª–æ–±–∞' ---
@router.message(F.text == '–ñ–∞–ª–æ–±–∞')
async def handle_complaint(message: Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –≤—ã–±—Ä–∞–ª '–ñ–∞–ª–æ–±–∞'")
    await message.answer(
        "–•–æ—Ä–æ—à–æüò•! –û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∏ –≤ –∫–æ–Ω—Ü–µ —Å–≤–æ–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—å—Ç–µ —Å–∏–º–≤–æ–ª @. "
        "\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–∞–º –≤–∞–º –Ω–∞–ø–∏—à–µ—Ç!",
        reply_markup=kb.any_func,
    )
@router.message(F.text == '–ù–∞–∑–∞–¥')
async def handle_back(message: Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é;) –í–∞–º —á–µ–º-–Ω–∏–±—É–¥—å –µ—â–µ –ø–æ–º–æ—á—å??",
        reply_markup=kb.main,
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ —Å '@' ---
@router.message(F.text.contains('@'))
async def handle_complaint_received(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∂–∞–ª–æ–±–∞ –æ—Ç {message.from_user.full_name}: {message.text}")
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!üòâ", 
        reply_markup=kb.any_func
    )
    await get_info_user(message, admin=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ '–ú–∞—Å—Ç–µ—Ä–∞' ---
@router.message(F.text == '–ú–∞—Å—Ç–µ—Ä–∞')
async def handle_specialists(message: Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –≤—ã–±—Ä–∞–ª '–ú–∞—Å—Ç–µ—Ä–∞'")
    
    specialists_keyboard = create_specialists_keyboard(
        [u.full_name() for u in users.values() if any(m.user_id == u.user_id for m in masters)]
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:", 
        reply_markup=specialists_keyboard
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞ ---
@router.message(lambda message: message.text in [u.full_name() for u in users.values()])
async def handle_selected_specialist(message: Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –≤—ã–±—Ä–∞–ª —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: {message.text}")
    
    selected_user = next((u for u in users.values() if u.full_name() == message.text), None)
    if selected_user:
        selected_master = next((m for m in masters if m.user_id == selected_user.user_id), None)
        if selected_master:
            global master_tg  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID –º–∞—Å—Ç–µ—Ä–∞
            master_tg = selected_master.tg_uid
            await message.answer(
                f"üë®‚Äçüîß {selected_user.full_name()}\n"
                f"üîπ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {selected_master.specialization}\n"
                f"üîπ –û–ø—ã—Ç: {selected_master.years_of_experience} –ª–µ—Ç",
                reply_markup=create_call_keyboard()
            )
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–í–æ–ø—Ä–æ—Å—ã' ---
@router.message(F.text == '–í–æ–ø—Ä–æ—Å—ã')
async def cmd_quests(message: Message):
    await message.answer(
        text_quest,
        reply_markup=await create_questions_keyboard()
    )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –≤–æ–ø—Ä–æ—Å ---
@router.callback_query(lambda call: call.data.startswith("question_"))
async def handle_question_callback(call: CallbackQuery):
    question_idx = int(call.data.split("_")[1]) - 1
    question_text = questions[question_idx]
    answer_text = answers[question_idx]
    await call.message.answer(f"**–í–æ–ø—Ä–æ—Å:** {question_text}\n**–û—Ç–≤–µ—Ç:** {answer_text}", parse_mode="Markdown")
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:", reply_markup=await create_questions_keyboard())
    await call.answer()
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ '–°–≤—è–∑–∞—Ç—å—Å—è' ---
@router.message(F.text == '–°–≤—è–∑–∞—Ç—å—Å—è')
async def handle_connect_with_specialist(message: Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.")
    if master_tg == 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–±—Ä–∞–Ω –º–∞—Å—Ç–µ—Ä
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=kb.main)
        return
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, —É–∫–∞–∑–∞–≤ –≤ –∫–æ–Ω—Ü–µ —Å–∏–º–≤–æ–ª '*'. –í–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ —Å '*' ---
@router.message(F.text.endswith('*'))
async def handle_message_with_star(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∏–º–≤–æ–ª–æ–º '*' –≤ –∫–æ–Ω—Ü–µ –æ—Ç {message.from_user.full_name}: {message.text}")
    
    if master_tg == 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–±—Ä–∞–Ω –º–∞—Å—Ç–µ—Ä
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=kb.main)
        return

    await message.bot.send_message(
        master_tg,
        f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n"
        f"{message.text}\n"
        f"–û—Ç: {message.from_user.first_name} {message.from_user.last_name}\n"
        f"Username: @{message.from_user.username}"
    )
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É! üòä",
        reply_markup=kb.any_func,
    )

# --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –º–∞—Å—Ç–µ—Ä—É ---
async def get_info_user(message: Message, admin: bool):
    bot = message.bot
    if admin:
        admin_id = os.getenv('ADMIN_ID')
        if not admin_id:
            logging.error("–ù–µ –∑–∞–¥–∞–Ω ADMIN_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
            return
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç {message.from_user.full_name}")
        await bot.send_message(
            admin_id,
            f"–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∞–º –ø–æ—Å–ª–∞–ª –∂–∞–ª–æ–±—É!üòÆ\n"
            f"{message.text}\n"
            f"–û—Ç: {message.from_user.first_name} {message.from_user.last_name}\n"
            f"Username: @{message.from_user.username}",
        )
    else:
        if master_tg == 0:
            logging.error("–ú–∞—Å—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä—É –æ—Ç {message.from_user.full_name}")
        await bot.send_message(
            master_tg,
            f"–í–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞!üòÆ\n"
            f"{message.text}\n"
            f"–û—Ç: {message.from_user.first_name} {message.from_user.last_name}\n"
            f"Username: @{message.from_user.username}",
        )
